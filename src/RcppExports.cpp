// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_comb_ind
unsigned get_comb_ind(const std::vector<bool>& active);
RcppExport SEXP _breakfast_get_comb_ind(SEXP activeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type active(activeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_comb_ind(active));
    return rcpp_result_gen;
END_RCPP
}
// extract_sub
NumericMatrix extract_sub(const IntegerVector& cand, const NumericVector& x);
RcppExport SEXP _breakfast_extract_sub(SEXP candSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type cand(candSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_sub(cand, x));
    return rcpp_result_gen;
END_RCPP
}
// exhaust_sc
List exhaust_sc(const IntegerVector& cand, const NumericMatrix& sub_sums, double strength, bool log_penalty, unsigned n, unsigned auc, double min_cost);
RcppExport SEXP _breakfast_exhaust_sc(SEXP candSEXP, SEXP sub_sumsSEXP, SEXP strengthSEXP, SEXP log_penaltySEXP, SEXP nSEXP, SEXP aucSEXP, SEXP min_costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type cand(candSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sub_sums(sub_sumsSEXP);
    Rcpp::traits::input_parameter< double >::type strength(strengthSEXP);
    Rcpp::traits::input_parameter< bool >::type log_penalty(log_penaltySEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned >::type auc(aucSEXP);
    Rcpp::traits::input_parameter< double >::type min_cost(min_costSEXP);
    rcpp_result_gen = Rcpp::wrap(exhaust_sc(cand, sub_sums, strength, log_penalty, n, auc, min_cost));
    return rcpp_result_gen;
END_RCPP
}
// call_not_r_wrapper
SEXP call_not_r_wrapper(SEXP x, SEXP intervals, SEXP method, SEXP contrast_type, SEXP parallel, SEXP augmented);
RcppExport SEXP _breakfast_call_not_r_wrapper(SEXP xSEXP, SEXP intervalsSEXP, SEXP methodSEXP, SEXP contrast_typeSEXP, SEXP parallelSEXP, SEXP augmentedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SEXP >::type contrast_type(contrast_typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type augmented(augmentedSEXP);
    rcpp_result_gen = Rcpp::wrap(call_not_r_wrapper(x, intervals, method, contrast_type, parallel, augmented));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_breakfast_get_comb_ind", (DL_FUNC) &_breakfast_get_comb_ind, 1},
    {"_breakfast_extract_sub", (DL_FUNC) &_breakfast_extract_sub, 2},
    {"_breakfast_exhaust_sc", (DL_FUNC) &_breakfast_exhaust_sc, 7},
    {"_breakfast_call_not_r_wrapper", (DL_FUNC) &_breakfast_call_not_r_wrapper, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_breakfast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
